# =============================================================================
# The number of birds banded at a series of sampling sites has been counted by your field crew and entered into the following list,
# where the the alphanumeric code is the location of each site and the number is the number of birds.
# =============================================================================
'''
data = [['A1', 28], ['A2', 32], ['A3', 1], ['A4', 0],
        ['A5', 10], ['A6', 22], ['A7', 30], ['A8', 19],
		['B1', 145], ['B2', 27], ['B3', 36], ['B4', 25],
		['B5', 9], ['B6', 38], ['B7', 21], ['B8', 12],
		['C1', 122], ['C2', 87], ['C3', 36], ['C4', 3],
		['D1', 0], ['D2', 5], ['D3', 55], ['D4', 62],
		['D5', 98], ['D6', 32]]

# How many sites are there?:
print('The number of bird sites is: ',len(data))
# How many birds were counted at the 7th site?:
print('\nNumber of birds at seventh site is: ',data[6][1])
# How many birds were counted at the last site?:
print('\nThe number of birds at last site is: ',data.pop()[1])
# What is the total number of birds counted across all sites?:
def lst_dict_lst(data):
    dic = {}
    for element in data:
        key = element[0]
        values = element[1]
        dic[key] = values
        
        lst = []
    for key in dic:
        lst.append(dic[key])
    return lst
print('\nThere are a total {} birds across all sites'.format(sum(lst_dict_lst(data))))
# What is the average number of birds seen on a site?:
def Average(data):
    avg = sum(lst_dict_lst(data))/len(data)
    return int(round(avg))
print('\nThere are, on average, {} birds at a site'.format(Average(data)))
# What is the total number of birds counted on sites with codes beginning with C?:
def bird_count(data):
    dic = {}
    for element in data:
        key = element[0]
        values = element[1]
        dic[key] = values
     
    birds = []
    for i in dic:
        if i[0] == 'C':
            birds.append(dic[i])
    return sum(birds)

print('\nThere are {} birds at the C sites'.format(bird_count(data)))
'''
#==============================================================================
import pandas as pd
import openpyxl
# relationship between the length of house-elvesâ€™ ears and aspects of their DNA
class ElfData:
    # Class Attributes
    elfFilePath = 'C:/Users/parkd/Downloads/houseelf_earlength_dna_data.csv'
    df1 = pd.read_csv(elfFilePath,sep=',')

# 2nd column including 'Large' or 'Small' ears:        
    def earLength(self):
        earLen = {}    
        earLen["Ear Size"] = []   
        for ear in elf.df1['earlength']:
            if ear > 10.0:
                earLen["Ear Size"].append('Large')
            elif ear <= 10.0:
                earLen["Ear Size"].append('Small')

        return earLen      
    
    
    def gc_content(self): # GC-Content: (G + C)/(A + T + G + C) * 100%
        dna = []
        for seq in elf.df1['dna sequence']:
            dna.append(list(seq))

        c = []
        g = []
        a = []
        t = []
        for base in dna:
            c.append(base.count('C'))
            g.append(base.count('G'))
            a.append(base.count('A'))
            t.append(base.count('T'))
        print(c)

        gcCont = {}
        gcCont["GC-Content"] = []
        for i in range(len(c)):
            gcCont["GC-Content"].append(round(float(c[i] + g[i]) / float(a[i] + t[i] + g[i] + c[i])*100,2))
        return gcCont
    
    def insertCol(self):
        elf.df1.insert(1,"Ear Size",elf.earLength()["Ear Size"])
        elf.df1.insert(2,"GC-Content",elf.gc_content()['GC-Content'])
     # segmentation:   
    def avg(self):
        df2 = elf.df1[['Ear Size','GC-Content']]
        avgs = df2.groupby('Ear Size').mean()
        print('The average GC-Content for Large and Small ears is:\n ',avgs)
        
    def table(self):
        ew = pd.ExcelWriter('C:/Users/parkd/Desktop/Excel/ElfData.xlsx')
        elf.df1.to_excel(ew,sheet_name='Elf DNA Data',index=False)
        workbook = ew.book
        worksheet = ew.sheets['Elf DNA Data']
        ew.close()
        return elf.df1
    
elf = ElfData()
elf.insertCol()
elf.avg()
elf.table()
