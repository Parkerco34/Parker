import pandas as pd
from pandas.io.excel import ExcelWriter
import xlsxwriter as xlw
import datetime as dt
import win32com.client as win32
import time as t
import os
import numpy as np
import pyodbc

# =============================================================================
# day_format1 = input('Enter Date YYYYMMDD: ')
# 
# if day_format1[4] == '0':
#     mnth = day_format1[5]
#     if day_format1[6] == '0':
#         day = day_format1[7]
#     else:
#         day = day_format1[6:8]
# else:
#     mnth = day_format1[4:6]
#     
# day_format2 = [mnth,day_format1[6:8],day_format1[2:4]]
# day_format2 = '.'.join(day_format2)
# 
# a = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
# month = a[int(day_format1[4:6]) - 1]
# =============================================================================

day_format1 = dt.datetime.today().strftime('%Y%m%d')
month = dt.datetime.today().strftime('%B')
day_format2 = dt.datetime.today().strftime('%#m.%d.%y')

# SQL QUERY:
# =========================================================================================================================================================
# =============================================================================
# runtime = t.strftime('%Y%m%d_%H%M%S')
# date_today = t.strftime('%Y-%m-%d')
# date_today_filename = t.strftime('%Y%m%d')
# 
# cnxn = pyodbc.connect('DSN=''ED SHDW;Trusted_Connection=yes;')
# cursor = cnxn.cursor()
# sql = """ SELECT DISTINCT ZZENBORID as TitaniumID, ARRELSTATUSID as Status, 
# ARRELUSERID as Collector, UASUPER as MANAGER, ARACLSTDTE as List_Date, ZZRELCOMP as Company,
#     (SELECT ARACTHDTE
#     FROM ARACTIVITYHIST
#     WHERE ARACTHRELID = ARRELID and aracthresid='BC') AS BC
# FROM ARENTITY
# JOIN ARRELATIONSHIP ON ARRELENID = ARENID
# LEFT JOIN STUSER ON USERID = ARRELUSERID
# LEFT JOIN ARACCOUNT ON ARACID = ARRELACID
# WHERE ARRELtypID = 'PRIM'   
# AND ARRELID = ARRELLEAD
# AND ARRELSTATUSID <> 'INACTCANCEL'
# AND ARACLSTDTE >= '2018-09-29 '"""
# 
# 
# df_Query = pd.read_sql(sql,cnxn)
# queryPath = '//gen-filesrv-v01/MatthewO/Cory/EXCEL/PY/Artiva_BC'+date_today_filename+'.xlsx'
# writ = pd.ExcelWriter(queryPath, engine='xlsxwriter')
# df_Query.to_excel(writ,sheet_name='Artiva_BC',index=False)
# fileMac = '//gen-filesrv-v01/MatthewO/Cory/EXCEL/PY/Artiva_BC'+date_today_filename+'.xlsm'
# wkbk = writ.book
# wkbk.queryPath = fileMac
# wkbk.add_vba_project('vbaProject.bin')
# writ.save()
# 
# print('Starting the macro refresh, which began at \n' + runtime)
# if os.path.exists(fileMac):
#     xl = win32com.client.Dispatch('Excel.Application')
#     xl.Workbooks.Open(Filename = fileMac,ReadOnly=1)
#     xl.Application('Macro1')
#     xl.Application.Quit()
#     del xl
#     
# print('\nMacro finished!')
# =============================================================================
# =========================================================================================================================================================
filePath = '//gen-filesrv-v01/Public/Reports/ED/ED_Inventory_{}.csv'.format(day_format1)
df_inv1 = pd.read_csv(filePath)
df_txt = pd.read_csv('//gen-filesrv-v01/MatthewO/Cory/Titanium Reports/{}/{}/ED BC_New.txt'.format(month,day_format2),sep='\t',engine='python',error_bad_lines=False)
df_txt['AR_Event_Creation_Date_Time'] = pd.to_datetime(df_txt.AR_Event_Creation_Date_Time)
#df_txt['AR_Event_Creation_Date_Time'] = [i.strftime('%m/%d/%Y') if not pd.isnull(i) else '' for i in df_txt['AR_Event_Creation_Date_Time']]
df_txt['Titanium ID'] = df_txt['Borrower_Number']
df_txt = df_txt[['Titanium ID', 'Workgroup_Name', 'AR_Event_Creation_Date_Time',
       'Actn_Cd_Action_Code_Value_Text', 'Current_Balance_Amount',
       'Borrower_Account_AR_Message_Text']]

employees = df_inv1[['Titanium ID','Collector', 'Manager']]
df_BC = df_txt.merge(employees,how='inner',on='Titanium ID')
df_BC = df_BC[['Titanium ID', 'Collector', 'Manager','Workgroup_Name', 'AR_Event_Creation_Date_Time',
       'Actn_Cd_Action_Code_Value_Text', 'Current_Balance_Amount',
       'Borrower_Account_AR_Message_Text']]
df_BC = df_BC.drop_duplicates('Titanium ID')

df1 = df_inv1[['Titanium ID']]
df2 = df_txt[['Titanium ID','AR_Event_Creation_Date_Time']]
df_merg1 = df1.merge(df2,how='inner',on='Titanium ID')
df_merg1['BC_Doc_Date'] = df_merg1['AR_Event_Creation_Date_Time']
df_merg1 = df_merg1.drop('AR_Event_Creation_Date_Time',axis=1)
df_inv2 = df_inv1.merge(df_merg1,how='inner',on='Titanium ID')
df_inv2 = df_inv2[['Contract', 'Account', 'Relationship ID', 'Titanium ID', 'BC_Doc_Date','State',
       'Status', 'CERT', 'CERT and Fees', 'Pay Count', 'Last VOP Date', 'VOP#',
       'Collector', 'Manager', 'Internal Score', 'Exp Score', 'Ref Num',
       'Date of Birth', 'POE Name', 'List Date', 'Default Date',
       'Last Worked Date', 'Redefault', 'Return Mail Flag', 'eMail',
       'Status Change Date', 'Num Prev Agy', 'Prev Agency',
       'Prev Agy Recall Date', 'Company', 'RAL Date', 'POI Date',
       'Reoccurring Payments', 'Payment Type', 'Setup Collector',
       'Active Rehab']]

df_query = pd.read_excel('//gen-filesrv-v01/MatthewO/Cory/SQL/Query py/Query.xlsx',sep='\t')

df_query.columns = ['Titanium ID', 'Status', 'Collector', 'MANAGER', 'List_Date', 'Company','BC']
df_merg2 = df_inv1.merge(df_query,how='left',on='Titanium ID', suffixes=('_',""))
df_merg2 = df_merg2.drop(['Company','List_Date','Status','Collector', 'MANAGER'],axis=1)

df_merg2['ARTIVA_BC_DATE'] = df_merg2['BC']
df_merg2 = df_merg2.drop(['BC'],axis=1)
df_merg2 = df_merg2[['Contract', 'Account', 'Relationship ID', 'Titanium ID', 'ARTIVA_BC_DATE','State',
       'Status_', 'CERT', 'CERT and Fees', 'Pay Count', 'Last VOP Date',
       'VOP#', 'Collector_', 'Manager', 'Internal Score', 'Exp Score',
       'Ref Num', 'Date of Birth', 'POE Name', 'List Date', 'Default Date',
       'Last Worked Date', 'Redefault', 'Return Mail Flag', 'eMail',
       'Status Change Date', 'Num Prev Agy', 'Prev Agency',
       'Prev Agy Recall Date', 'Company_', 'RAL Date', 'POI Date',
       'Reoccurring Payments', 'Payment Type', 'Setup Collector',
       'Active Rehab']]
bc = df_merg2[['Titanium ID','ARTIVA_BC_DATE']]

df_Inventory = df_inv2.merge(bc,how='left',on='Titanium ID')
df_Inventory = df_Inventory[['Contract', 'Account', 'Relationship ID', 'Titanium ID',
       'BC_Doc_Date', 'ARTIVA_BC_DATE','State', 'Status', 'CERT', 'CERT and Fees',
       'Pay Count', 'Last VOP Date', 'VOP#', 'Collector', 'Manager',
       'Internal Score', 'Exp Score', 'Ref Num', 'Date of Birth', 'POE Name',
       'List Date', 'Default Date', 'Last Worked Date', 'Redefault',
       'Return Mail Flag', 'eMail', 'Status Change Date', 'Num Prev Agy',
       'Prev Agency', 'Prev Agy Recall Date', 'Company', 'RAL Date',
       'POI Date', 'Reoccurring Payments', 'Payment Type', 'Setup Collector',
       'Active Rehab']]

df_Inventory = df_Inventory.drop_duplicates('Titanium ID')
df_Inventory['ARTIVA_BC_DATE'] = pd.to_datetime(df_Inventory.ARTIVA_BC_DATE)
#df_Inventory['ARTIVA_BC_DATE'] = [i.strftime('%m/%d/%Y') if not pd.isnull(i) else '' for i in df_Inventory['ARTIVA_BC_DATE']]

fil = '//gen-filesrv-v01/MatthewO/Cory/EXCEL/PY/Artiva_BC {}.xlsx'.format(day_format2)
with ExcelWriter(fil, engine='xlsxwriter') as writ:
    df_Inventory.to_excel(writ,sheet_name='Inventory',index=False)
    df_BC.to_excel(writ,sheet_name='ED BC',index=False)

fileMac = '//gen-filesrv-v01/MatthewO/Cory/EXCEL/PY/Artiva_BC {}.xlsm'.format(day_format2)
wkbk = writ.book
wkbk.fil = fileMac
wkbk.add_vba_project('//gen-filesrv-v01/MatthewO/Cory/EXCEL/PY/vbaProject.bin')
writ.save()

if os.path.exists(fileMac):
    xl = win32.encache.EnsureDispatch('Excel.Application')
    xl.Visible = True
    xl.Workbooks.Open(fileMac)
    xl.Application.Run('Macro1')
    xl.Application.Run('Macro2')
    xl.Application.Save()
    #xl.Application.Quit()
    #del xl

# =============================================================================
# with ExcelWriter('//gen-filesrv-v01/MatthewO/James/ED Borrower Contact/ED BC {}.xlsx'.format(day_format2)) as write:
#     df_Inventory.to_excel(write,sheet_name='Inventory',index=False)
#     df_BC.to_excel(write,sheet_name='ED BC',index=False)
#     write.save()
# =============================================================================

# =============================================================================
# #TEST:
# with ExcelWriter('//gen-filesrv-v01/MatthewO/Cory/EXCEL/PY/BS_BC_{}.xlsx'.format(day_format2)) as write:
#     df_Inventory.to_excel(write,sheet_name='Inventory',index=False)
#     df_BC.to_excel(write,sheet_name='ED BC',index=False)
#     write.save()
# =============================================================================
